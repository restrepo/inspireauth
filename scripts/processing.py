"""
scripts.processing.py

Processing module of the database for the INSPIRE LA dataset.

The functions here generate DataFrames from the main database for any given country.

Note: some functions will be taken from the Jupyter notebooks of the `exploration` branch of the project.
Date: 15/08/2024
"""

import pandas as pd

from loading import load_data
from utils import LA_countries

# Load the master database
DATABASE = load_data(local=False)


def generate_dataframe(country: str) -> pd.DataFrame:
    """
    Generate a DataFrame whose rows are all the publications of a given country.
    The `recid` entry is unique for each publication.
    """
    # select column
    # db = db_master[db_master["country"] == country].reset_index(drop=True)
    db = DATABASE[DATABASE["country"] == country].reset_index(drop=True)

    # obtain list of the institutions of the country
    inst_list = db["institution_id"].drop_duplicates().to_list()

    # stack papers and select the ones from the appropriate institutions
    dp = pd.DataFrame(db.papers.apply(pd.Series).stack().to_list()).reset_index(
        drop=True
    )
    dp = dp[dp["institution_id"].isin(inst_list)]

    # get rid of paper duplicates
    dp = dp.drop_duplicates(subset="recid")

    # skip entries without listed `year`. This ignores the papers that do not have year.
    dp = dp[pd.to_numeric(dp["year"], errors="coerce").notnull()].reset_index(drop=True)

    # transform to numerical values
    dp["year"] = pd.to_numeric(dp["year"])
    # get rid of old entries
    dp = dp[dp["year"] >= 1900]

    return dp


def generate_dataframe_latam():
    """
    Generate a DataFrame whose rows are all the publications of the Latin American countries.

    Returns:
        pd.DataFrame: The DataFrame with all the publications of the Latin American countries.

    Example:
        generate_dataframe_latam()
    """

    df_latam = {}
    for country in LA_countries:
        df_latam[country] = generate_dataframe(country)

    df_latam_stack = pd.concat(
        [df_latam[country] for country in LA_countries], ignore_index=True
    )
    df_latam = df_latam_stack.drop_duplicates(subset="recid")

    return df_latam


def generate_articles_year_count(df):
    """
    Generate a Series whose index is the years and the values are the number of articles published in that year
    of that country

    Parameters:
        df (pd.Dataframe): The dataframe of a country or Lat. Am. generated by the function `generate_dataframe`.

    Returns:
        pd.Series: The year as index and the number of articles published in each year.

    Example:
        generate_articles_year_count(generate_dataframe('Chile'))
    """

    # Ensure the 'year' column is numeric and drop rows where 'year' is NaN
    df = df[pd.to_numeric(df["year"], errors="coerce").notnull()].reset_index(drop=True)
    df["year"] = pd.to_numeric(df["year"])

    # Filter out any papers before 1900 (if necessary)
    df = df[df["year"] >= 1900]

    # Create a range of years from the minimum year to 2021
    years_range = range(df["year"].min(), 2022)

    # Count the number of papers published each year
    year_counts = df["year"].value_counts().sort_index()
    year_counts = year_counts.reindex(years_range, fill_value=0)

    return year_counts


def generate_publication_percentage(df_latam, df_world):
    """
    Generate a DataFrame with the percentage of publications of Latin America with respect to the world.

    Parameters:
        df_latam (pd.Series): The number of articles published each year in Latin America.
        df_world (pd.Series): The number of articles published each year in the world.

    Returns:
        pd.DataFrame: The percentage of publications of Latin America with respect to the world.
    """

    # Combine the two DataFrames
    df_combined = pd.concat([df_world, df_latam], axis=1)
    df_combined = df_combined.rename(columns={"Citable papers": "World", "year": "LA"})

    # Calculate the percentage of publications of Latin America with respect to the world
    df_combined["Percentage"] = df_combined["LA"] / df_combined["World"] * 100

    return df_combined
